<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<mapper namespace="employee">

    <!-- 게시글 저장 -->
    <!-- value에 Dto 값들 넣어줌-->
    <!-- resultType을 사용하면 매퍼 파일에서 복잡한 매핑 설정 없이 간단하게 매핑할 수 있습니다.-->
    <!-- resultType은 select 쿼리에서 결과를 반환할 때 사용하는 속성이므로, insert,update와 delete에서는 resultType이 필요하지 않습니다.-->


    <!-- ResultMap 정의 -->
    <!-- column에는 실제 테이블 컬럼명-->
    <!-- property에는 Dto변수-->

    <!-- ResultMap 정의 -->
    <resultMap id="EmployeeDtoMap" type="com.example.table.Dto.EmployeeDto">
        <result column="id" property="id"/>
        <result column="DEPT_NO" property="deptNo"/>
        <result column="Employee_name" property="employeeName"/>
        <result column="POSITION" property="position"/>
        <result column="EMAIL" property="email"/>
        <result column="Phone_NM" property="phoneNm"/>
        <result column="createdAt" property="createdAt"/>
        <result column="modifiedAt" property="modifiedAt"/>
        <result column="fileAttached" property="fileAttached"/>
    </resultMap>


    <!-- 1-1. 리스트 조회 (페이징) -->
    <select id="findAllPaged" resultMap="EmployeeDtoMap">
        select id,
        DEPT_NO,
        Employee_name,
        POSITION,
        EMAIL,
        Phone_NM,
        createdAt,
        modifiedAt
        from employee
        order by
        <choose>
            <when test="sortBy == 'deptNo'">
                DEPT_NO ${sortOrder}
            </when>
            <when test="sortBy == 'createdAt'">
                createdAt ${sortOrder}
            </when>
            <when test="sortBy == 'modifiedAt'">
                modifiedAt ${sortOrder}
            </when>
        </choose>,
        id desc
        limit #{size} offset #{offset}
    </select>

<!--    페이징 처리를 위해 offset와 limit 값을 계산하는 방식은 다음과 같습니다.-->
<!--    limit는 한 페이지에 표시할 데이터의 수 (size)를 나타냅니다.-->
<!--    offset는 (현재 페이지 - 1) * 페이지당 데이터 수 ((page - 1) * size)로 계산됩니다.-->
<!--    예를 들어, 페이지 크기가 10이고, 3번째 페이지를 가져오려면 offset는 20 ((3 - 1) * 10)이 되고, limit는 10이 됩니다.-->
<!--    limit 10 offset 20-->
<!--    이 쿼리는 21번째 행부터 30번째 행까지의 데이터를 반환합니다.-->


    <!-- 1-1. 전체 직원 수 조회 -->
    <select id="getTotalBoardCount" resultType="int">
        select count(*) from employee
    </select>


    <!-- 1-2. 검색어 리스트 조회 (페이징) -->
    <select id="searchEmployees" resultMap="EmployeeDtoMap">
        select id,
        DEPT_NO,
        Employee_name,
        POSITION,
        EMAIL,
        Phone_NM,
        createdAt,
        modifiedAt
        from employee
        where
        <if test="searchType == 'all'">
            (DEPT_NO like #{query}
            or Employee_name like #{query}
            or POSITION like #{query}
            or EMAIL like #{query}
            or date_format(modifiedAt, "%Y-%m-%d") like #{query})
        </if>
        <if test="searchType != 'all'">
            <choose>
                <when test="searchType == 'deptNo'">
                    DEPT_NO like #{query}
                </when>
                <when test="searchType == 'employeeName'">
                    Employee_name like #{query}
                </when>
                <when test="searchType == 'position'">
                    POSITION like #{query}
                </when>
                <when test="searchType == 'email'">
                    EMAIL like #{query}
                </when>
                <when test="searchType == 'modifiedAt'">
                    date_format(modifiedAt, "%Y-%m-%d") like #{query}
                </when>
            </choose>
        </if>
        order by
        <choose>
            <when test="sortBy == 'deptNo'">
                DEPT_NO ${sortOrder}
            </when>
            <when test="sortBy == 'createdAt'">
                createdAt ${sortOrder}
            </when>
            <when test="sortBy == 'modifiedAt'">
                modifiedAt ${sortOrder}
            </when>
        </choose>,
        id desc
        limit #{size} offset #{offset}
    </select>

    <!-- 1-2. 검색 직원 수 조회 -->
    <select id="getTotalSearchCount" resultType="int">
        select count(*)
        from employee
        where

        <if test="searchType == 'all'">
            (DEPT_NO like #{query}
            or Employee_name like #{query}
            or POSITION like #{query}
            or EMAIL like #{query}
            or date_format(modifiedAt, "%Y-%m-%d") like #{query})
        </if>

        <if test="searchType != 'all'">
            <choose>
                <when test="searchType == 'deptNo'">
                    DEPT_NO like #{query}
                </when>
                <when test="searchType == 'employeeName'">
                    Employee_name like #{query}
                </when>
                <when test="searchType == 'position'">
                    POSITION like #{query}
                </when>
                <when test="searchType == 'email'">
                    EMAIL like #{query}
                </when>
                <when test="searchType == 'modifiedAt'">
                    date_format(modifiedAt, "%Y-%m-%d") like #{query}
                </when>
            </choose>
        </if>

    </select>



    <!-- 2. 직원 등록-->
    <insert id="save" parameterType="com.example.table.Dto.EmployeeDto">
        <selectKey keyProperty="id" order="AFTER" resultType="long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO employee (DEPT_NO, Employee_name, POSITION, EMAIL, Phone_NM, createdAt, fileAttached)
        VALUES (#{deptNo}, #{employeeName}, #{position}, #{email}, #{phoneNm}, NOW(), #{fileAttached})
    </insert>




    <!-- 3. 직원 상세 조회 -->
    <select id="findById" resultMap="EmployeeDtoMap">
        select id,
               DEPT_NO,
               Employee_name,
               POSITION,
               EMAIL,
               Phone_NM,
               createdAt,
               modifiedAt,
               fileAttached
        from employee where id=#{id}
    </select>


    <!-- 4. 직원 수정-->
    <update id="update">
        update employee set DEPT_NO=#{deptNo},
                            Employee_name=#{employeeName},
                            POSITION=#{position},
                            EMAIL=#{email},
                            Phone_NM=#{phoneNm},
                            modifiedAt = NOW()
        where id=#{id}
    </update>

    <!-- 5. 직원 삭제 -->
    <delete id="delete">
        delete from employee where id=#{id}
    </delete>


    <!-- 6. 직원 번호 중복 확인-->
    <select id="findByDeptNo" resultMap="EmployeeDtoMap">
        select * from employee where DEPT_NO = #{deptNo}
    </select>


    <!-- 7.첨부파일 저장 -->
    <insert id="saveFile" parameterType="file">
        INSERT INTO file (ORIGINAL_NAME, SAVE_NAME, EMPLOY_ID)
        VALUES (#{originalName}, #{saveName}, #{employId})
    </insert>


    <!-- 8.직원의 파일 목록 조회 -->
    <select id="findFilesByEmployeeId" resultType="file">
        SELECT id, employ_Id AS employId, original_Name AS originalName, save_Name AS saveName, create_At AS createAt
        FROM file
        WHERE employ_Id = #{employId}
    </select>


    <!-- 9. 파일 아이디 조회 -->
    <select id="findFileById" resultType="file">
        SELECT id, employ_Id AS employId, original_Name AS originalName, save_Name AS saveName, create_At AS createAt
        FROM file
        WHERE id = #{id}
    </select>


    <!-- 10. 파일 첨부 여부 업데이트 -->
    <update id="updateFileAttached">
        update employee set fileAttached=#{fileAttached} where id=#{id}
    </update>


    <!-- 11. 파일 삭제 -->
    <delete id="deleteFile">
        DELETE FROM file WHERE id = #{id}
    </delete>


</mapper>



